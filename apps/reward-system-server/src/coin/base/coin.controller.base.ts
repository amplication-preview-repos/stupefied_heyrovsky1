/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CoinService } from "../coin.service";
import { CoinCreateInput } from "./CoinCreateInput";
import { Coin } from "./Coin";
import { CoinFindManyArgs } from "./CoinFindManyArgs";
import { CoinWhereUniqueInput } from "./CoinWhereUniqueInput";
import { CoinUpdateInput } from "./CoinUpdateInput";

export class CoinControllerBase {
  constructor(protected readonly service: CoinService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Coin })
  async createCoin(@common.Body() data: CoinCreateInput): Promise<Coin> {
    return await this.service.createCoin({
      data: data,
      select: {
        coins: true,
        createdAt: true,
        dataCadastro: true,
        email: true,
        id: true,
        ip: true,
        rewardSharing: true,
        updatedAt: true,
        userHash: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Coin] })
  @ApiNestedQuery(CoinFindManyArgs)
  async coins(@common.Req() request: Request): Promise<Coin[]> {
    const args = plainToClass(CoinFindManyArgs, request.query);
    return this.service.coins({
      ...args,
      select: {
        coins: true,
        createdAt: true,
        dataCadastro: true,
        email: true,
        id: true,
        ip: true,
        rewardSharing: true,
        updatedAt: true,
        userHash: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Coin })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async coin(
    @common.Param() params: CoinWhereUniqueInput
  ): Promise<Coin | null> {
    const result = await this.service.coin({
      where: params,
      select: {
        coins: true,
        createdAt: true,
        dataCadastro: true,
        email: true,
        id: true,
        ip: true,
        rewardSharing: true,
        updatedAt: true,
        userHash: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Coin })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCoin(
    @common.Param() params: CoinWhereUniqueInput,
    @common.Body() data: CoinUpdateInput
  ): Promise<Coin | null> {
    try {
      return await this.service.updateCoin({
        where: params,
        data: data,
        select: {
          coins: true,
          createdAt: true,
          dataCadastro: true,
          email: true,
          id: true,
          ip: true,
          rewardSharing: true,
          updatedAt: true,
          userHash: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Coin })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCoin(
    @common.Param() params: CoinWhereUniqueInput
  ): Promise<Coin | null> {
    try {
      return await this.service.deleteCoin({
        where: params,
        select: {
          coins: true,
          createdAt: true,
          dataCadastro: true,
          email: true,
          id: true,
          ip: true,
          rewardSharing: true,
          updatedAt: true,
          userHash: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
