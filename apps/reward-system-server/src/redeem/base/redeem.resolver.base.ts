/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Redeem } from "./Redeem";
import { RedeemCountArgs } from "./RedeemCountArgs";
import { RedeemFindManyArgs } from "./RedeemFindManyArgs";
import { RedeemFindUniqueArgs } from "./RedeemFindUniqueArgs";
import { CreateRedeemArgs } from "./CreateRedeemArgs";
import { UpdateRedeemArgs } from "./UpdateRedeemArgs";
import { DeleteRedeemArgs } from "./DeleteRedeemArgs";
import { RedeemService } from "../redeem.service";
@graphql.Resolver(() => Redeem)
export class RedeemResolverBase {
  constructor(protected readonly service: RedeemService) {}

  async _redeemsMeta(
    @graphql.Args() args: RedeemCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Redeem])
  async redeems(@graphql.Args() args: RedeemFindManyArgs): Promise<Redeem[]> {
    return this.service.redeems(args);
  }

  @graphql.Query(() => Redeem, { nullable: true })
  async redeem(
    @graphql.Args() args: RedeemFindUniqueArgs
  ): Promise<Redeem | null> {
    const result = await this.service.redeem(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Redeem)
  async createRedeem(@graphql.Args() args: CreateRedeemArgs): Promise<Redeem> {
    return await this.service.createRedeem({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Redeem)
  async updateRedeem(
    @graphql.Args() args: UpdateRedeemArgs
  ): Promise<Redeem | null> {
    try {
      return await this.service.updateRedeem({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Redeem)
  async deleteRedeem(
    @graphql.Args() args: DeleteRedeemArgs
  ): Promise<Redeem | null> {
    try {
      return await this.service.deleteRedeem(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
