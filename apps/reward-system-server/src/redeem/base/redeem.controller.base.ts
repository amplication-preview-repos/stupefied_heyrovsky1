/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { RedeemService } from "../redeem.service";
import { RedeemCreateInput } from "./RedeemCreateInput";
import { Redeem } from "./Redeem";
import { RedeemFindManyArgs } from "./RedeemFindManyArgs";
import { RedeemWhereUniqueInput } from "./RedeemWhereUniqueInput";
import { RedeemUpdateInput } from "./RedeemUpdateInput";

export class RedeemControllerBase {
  constructor(protected readonly service: RedeemService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Redeem })
  async createRedeem(@common.Body() data: RedeemCreateInput): Promise<Redeem> {
    return await this.service.createRedeem({
      data: data,
      select: {
        action: true,
        coinValue: true,
        coinsAfter: true,
        coinsBefore: true,
        createdAt: true,
        id: true,
        updatedAt: true,
        userHash: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Redeem] })
  @ApiNestedQuery(RedeemFindManyArgs)
  async redeems(@common.Req() request: Request): Promise<Redeem[]> {
    const args = plainToClass(RedeemFindManyArgs, request.query);
    return this.service.redeems({
      ...args,
      select: {
        action: true,
        coinValue: true,
        coinsAfter: true,
        coinsBefore: true,
        createdAt: true,
        id: true,
        updatedAt: true,
        userHash: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Redeem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async redeem(
    @common.Param() params: RedeemWhereUniqueInput
  ): Promise<Redeem | null> {
    const result = await this.service.redeem({
      where: params,
      select: {
        action: true,
        coinValue: true,
        coinsAfter: true,
        coinsBefore: true,
        createdAt: true,
        id: true,
        updatedAt: true,
        userHash: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Redeem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateRedeem(
    @common.Param() params: RedeemWhereUniqueInput,
    @common.Body() data: RedeemUpdateInput
  ): Promise<Redeem | null> {
    try {
      return await this.service.updateRedeem({
        where: params,
        data: data,
        select: {
          action: true,
          coinValue: true,
          coinsAfter: true,
          coinsBefore: true,
          createdAt: true,
          id: true,
          updatedAt: true,
          userHash: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Redeem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteRedeem(
    @common.Param() params: RedeemWhereUniqueInput
  ): Promise<Redeem | null> {
    try {
      return await this.service.deleteRedeem({
        where: params,
        select: {
          action: true,
          coinValue: true,
          coinsAfter: true,
          coinsBefore: true,
          createdAt: true,
          id: true,
          updatedAt: true,
          userHash: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
